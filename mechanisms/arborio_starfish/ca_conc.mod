TITLE Mod file for component: Component(id=ca_conc type=fixedFactorConcentrationModel)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.7.0
         org.neuroml.model   v1.7.0
         jLEMS               v0.10.2

ENDCOMMENT

NEURON {
    SUFFIX ca_conc
    USEION ca READ cao, ica WRITE cai VALENCE 2
    RANGE cai
    RANGE cao
    GLOBAL initialExtConcentration
    RANGE restingConc                       : parameter
    RANGE decayConstant                     : parameter
    RANGE rho                               : parameter
    RANGE surfaceArea                       : parameter
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

CONSTANT {
   pi = 3.14159
}

PARAMETER {
    restingConc = 0 (mM)
    decayConstant = 13.333334 (ms)
    rho = 300000 (mM m2 /A /s)
    diam
}

ASSIGNED {
    rate_concentration (mM/ms)
    initialExtConcentration (mM)
    surfaceArea 
}

STATE {
    extConcentration (mM) 
    cai
    
}

INITIAL {
    cai = 3.7152
    initialExtConcentration = cao
    surfaceArea = pi*diam*diam/4   

    rates(ica)
    rates(ica) ? To ensure correct initialisation.
    
    extConcentration = initialExtConcentration
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    if (cai  < 0) {
        cai = 0 ? standard OnCondition
    }
    
    
}

DERIVATIVE states {
    rates(ica)
    cai' = rate_concentration
    
}

PROCEDURE rates(ica) {
    LOCAL iCa

    iCa = -1 * (0.01) * ica * surfaceArea :   iCa has units (nA) ; ica (built in to NEURON) has units (mA/cm2)...
    
    rate_concentration = (iCa/surfaceArea) *  rho  - ((  cai   -   restingConc  ) /   decayConstant  ) ? Note units of all quantities used here need to be consistent!
}

